
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDErightASSIGNleftNOTnonassocLTLTEQEQrightISVOIDrightINT_COMPleftATleftDOTARROW ASSIGN AT CASE CLASS COMMA DIVIDE DOT ELSE EQ ESAC FALSE FI ID IF IN INHERITS INTEGER INT_COMP ISVOID LBRACE LET LOOP LPAREN LT LTEQ MINUS MULTIPLY NEW NOT OF PLUS POOL RBRACE RPAREN SEMICOLON STRING TDOTS THEN TRUE TYPE WHILEprogram : class SEMICOLON program\n               | class SEMICOLONclass : CLASS TYPE _inherits LBRACE ffeature RBRACE_inherits : INHERITS TYPE\n                 | emptyffeature : feature SEMICOLON ffeature\n                | emptyfeature : ID LPAREN formal RPAREN TDOTS TYPE LBRACE expr RBRACE\n               | ID LPAREN RPAREN TDOTS TYPE LBRACE expr RBRACE\n               | temp\n               formal : idDots COMMA formal\n              | idDotsexpression_list : expr SEMICOLON expression_list\n                       | expr SEMICOLONexpr : NOT exprexpr : expr PLUS expr\n            | expr MINUS expr\n            | expr MULTIPLY expr\n            | expr DIVIDE exprexpr : LPAREN expr RPAREN\n            | ISVOID expr\n            | block\n            | conditional\n            | loop\n            | case\n            | dispatch\n            | INT_COMP expr\n            block : LBRACE expression_list RBRACEexpr : IDexpr : INTEGER expr : STRINGexpr : TRUE\n            | FALSEexpr : NEW TYPEexpr : letdispatch : expr especific DOT dispatch_call\n                | dispatch_callespecific : AT TYPE\n                 | emptydispatch_call : ID LPAREN RPAREN\n                     | ID LPAREN expr RPAREN\n                     | ID LPAREN expr params_expression RPARENparams_expression : COMMA expr params_expression\n                         | COMMA exprempty :let : LET declaration_list IN exprdeclaration_list : temp COMMA declaration_list\n                        | temptemp : idDots\n            | idDots ASSIGN expridDots : ID TDOTS TYPEconditional : IF expr THEN expr ELSE expr FIloop : WHILE expr LOOP expr POOLcase : CASE expr OF add ESACadd : derivate SEMICOLON add\n           | derivate SEMICOLONderivate : idDots ARROW exprexpr : expr LT expr\n            | expr LTEQ expr\n            | expr EQ exprexpr : ID ASSIGN expr'
    
_lr_action_items = {'CLASS':([0,4,],[3,3,]),'$end':([1,4,6,],[0,-2,-1,]),'SEMICOLON':([2,13,16,17,18,28,29,33,34,35,36,37,39,40,41,42,43,45,50,65,67,68,71,73,82,83,84,85,86,87,88,91,92,93,95,104,106,113,115,119,122,123,127,131,132,133,],[4,19,-10,-49,-3,-51,-50,-22,-23,-24,-25,-26,-29,-30,-31,-32,-33,-35,-37,-15,-21,-27,-34,96,-16,-17,-18,-19,-58,-59,-60,-20,-61,-40,-28,-36,-41,124,-46,-42,-53,-54,-9,-57,-8,-52,]),'TYPE':([3,8,21,44,53,63,79,],[5,11,28,71,80,90,102,]),'INHERITS':([5,],[8,]),'LBRACE':([5,7,9,11,22,30,31,32,38,46,47,48,49,55,56,57,58,59,60,61,69,70,80,96,97,98,100,102,103,108,117,121,125,],[-45,10,-5,-4,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,103,46,46,46,46,117,46,46,46,46,46,]),'ID':([10,19,20,22,30,31,32,38,46,47,48,49,51,54,55,56,57,58,59,60,61,69,70,89,96,97,98,99,100,101,103,108,117,121,124,125,],[15,15,24,39,39,39,39,39,39,39,39,39,24,24,39,39,39,39,39,39,39,39,39,105,39,39,39,24,39,24,39,39,39,39,24,39,]),'RBRACE':([10,12,14,19,23,33,34,35,36,37,39,40,41,42,43,45,50,65,67,68,71,72,82,83,84,85,86,87,88,91,92,93,95,96,104,106,109,115,118,119,122,123,126,133,],[-45,18,-7,-45,-6,-22,-23,-24,-25,-26,-29,-30,-31,-32,-33,-35,-37,-15,-21,-27,-34,95,-16,-17,-18,-19,-58,-59,-60,-20,-61,-40,-28,-14,-36,-41,-13,-46,127,-42,-53,-54,132,-52,]),'LPAREN':([15,22,30,31,32,38,39,46,47,48,49,55,56,57,58,59,60,61,69,70,96,97,98,100,103,105,108,117,121,125,],[20,31,31,31,31,31,70,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,70,31,31,31,31,]),'TDOTS':([15,24,26,52,],[21,21,53,79,]),'COMMA':([17,27,28,29,33,34,35,36,37,39,40,41,42,43,45,50,65,67,68,71,78,82,83,84,85,86,87,88,91,92,93,94,95,104,106,115,119,120,122,123,133,],[-49,54,-51,-50,-22,-23,-24,-25,-26,-29,-30,-31,-32,-33,-35,-37,-15,-21,-27,-34,101,-16,-17,-18,-19,-58,-59,-60,-20,-61,-40,108,-28,-36,-41,-46,-42,108,-53,-54,-52,]),'IN':([17,28,29,33,34,35,36,37,39,40,41,42,43,45,50,65,67,68,71,77,78,82,83,84,85,86,87,88,91,92,93,95,104,106,115,116,119,122,123,133,],[-49,-51,-50,-22,-23,-24,-25,-26,-29,-30,-31,-32,-33,-35,-37,-15,-21,-27,-34,100,-48,-16,-17,-18,-19,-58,-59,-60,-20,-61,-40,-28,-36,-41,-46,-47,-42,-53,-54,-52,]),'ASSIGN':([17,28,39,],[22,-51,69,]),'RPAREN':([20,25,27,28,33,34,35,36,37,39,40,41,42,43,45,50,65,66,67,68,70,71,81,82,83,84,85,86,87,88,91,92,93,94,95,104,106,107,115,119,120,122,123,128,133,],[26,52,-12,-51,-22,-23,-24,-25,-26,-29,-30,-31,-32,-33,-35,-37,-15,91,-21,-27,93,-34,-11,-16,-17,-18,-19,-58,-59,-60,-20,-61,-40,106,-28,-36,-41,119,-46,-42,-44,-53,-54,-43,-52,]),'NOT':([22,30,31,32,38,46,47,48,49,55,56,57,58,59,60,61,69,70,96,97,98,100,103,108,117,121,125,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'ISVOID':([22,30,31,32,38,46,47,48,49,55,56,57,58,59,60,61,69,70,96,97,98,100,103,108,117,121,125,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'INT_COMP':([22,30,31,32,38,46,47,48,49,55,56,57,58,59,60,61,69,70,96,97,98,100,103,108,117,121,125,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'INTEGER':([22,30,31,32,38,46,47,48,49,55,56,57,58,59,60,61,69,70,96,97,98,100,103,108,117,121,125,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'STRING':([22,30,31,32,38,46,47,48,49,55,56,57,58,59,60,61,69,70,96,97,98,100,103,108,117,121,125,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'TRUE':([22,30,31,32,38,46,47,48,49,55,56,57,58,59,60,61,69,70,96,97,98,100,103,108,117,121,125,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'FALSE':([22,30,31,32,38,46,47,48,49,55,56,57,58,59,60,61,69,70,96,97,98,100,103,108,117,121,125,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'NEW':([22,30,31,32,38,46,47,48,49,55,56,57,58,59,60,61,69,70,96,97,98,100,103,108,117,121,125,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'IF':([22,30,31,32,38,46,47,48,49,55,56,57,58,59,60,61,69,70,96,97,98,100,103,108,117,121,125,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'WHILE':([22,30,31,32,38,46,47,48,49,55,56,57,58,59,60,61,69,70,96,97,98,100,103,108,117,121,125,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'CASE':([22,30,31,32,38,46,47,48,49,55,56,57,58,59,60,61,69,70,96,97,98,100,103,108,117,121,125,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'LET':([22,30,31,32,38,46,47,48,49,55,56,57,58,59,60,61,69,70,96,97,98,100,103,108,117,121,125,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'ARROW':([28,114,],[-51,125,]),'PLUS':([29,33,34,35,36,37,39,40,41,42,43,45,50,65,66,67,68,71,73,74,75,76,82,83,84,85,86,87,88,91,92,93,94,95,104,106,110,111,115,118,119,120,122,123,126,129,131,133,],[55,-22,-23,-24,-25,-26,-29,-30,-31,-32,-33,-35,-37,-15,55,-21,-27,-34,55,55,55,55,-16,-17,-18,-19,-58,-59,-60,-20,-61,-40,55,-28,-36,-41,55,55,55,55,-42,55,-53,-54,55,55,55,-52,]),'MINUS':([29,33,34,35,36,37,39,40,41,42,43,45,50,65,66,67,68,71,73,74,75,76,82,83,84,85,86,87,88,91,92,93,94,95,104,106,110,111,115,118,119,120,122,123,126,129,131,133,],[56,-22,-23,-24,-25,-26,-29,-30,-31,-32,-33,-35,-37,-15,56,-21,-27,-34,56,56,56,56,-16,-17,-18,-19,-58,-59,-60,-20,-61,-40,56,-28,-36,-41,56,56,56,56,-42,56,-53,-54,56,56,56,-52,]),'MULTIPLY':([29,33,34,35,36,37,39,40,41,42,43,45,50,65,66,67,68,71,73,74,75,76,82,83,84,85,86,87,88,91,92,93,94,95,104,106,110,111,115,118,119,120,122,123,126,129,131,133,],[57,-22,-23,-24,-25,-26,-29,-30,-31,-32,-33,-35,-37,-15,57,-21,-27,-34,57,57,57,57,57,57,-18,-19,-58,-59,-60,-20,-61,-40,57,-28,-36,-41,57,57,57,57,-42,57,-53,-54,57,57,57,-52,]),'DIVIDE':([29,33,34,35,36,37,39,40,41,42,43,45,50,65,66,67,68,71,73,74,75,76,82,83,84,85,86,87,88,91,92,93,94,95,104,106,110,111,115,118,119,120,122,123,126,129,131,133,],[58,-22,-23,-24,-25,-26,-29,-30,-31,-32,-33,-35,-37,-15,58,-21,-27,-34,58,58,58,58,58,58,-18,-19,-58,-59,-60,-20,-61,-40,58,-28,-36,-41,58,58,58,58,-42,58,-53,-54,58,58,58,-52,]),'LT':([29,33,34,35,36,37,39,40,41,42,43,45,50,65,66,67,68,71,73,74,75,76,82,83,84,85,86,87,88,91,92,93,94,95,104,106,110,111,115,118,119,120,122,123,126,129,131,133,],[59,-22,-23,-24,-25,-26,-29,-30,-31,-32,-33,-35,-37,59,59,-21,-27,-34,59,59,59,59,59,59,59,59,None,None,None,-20,59,-40,59,-28,-36,-41,59,59,59,59,-42,59,-53,-54,59,59,59,-52,]),'LTEQ':([29,33,34,35,36,37,39,40,41,42,43,45,50,65,66,67,68,71,73,74,75,76,82,83,84,85,86,87,88,91,92,93,94,95,104,106,110,111,115,118,119,120,122,123,126,129,131,133,],[60,-22,-23,-24,-25,-26,-29,-30,-31,-32,-33,-35,-37,60,60,-21,-27,-34,60,60,60,60,60,60,60,60,None,None,None,-20,60,-40,60,-28,-36,-41,60,60,60,60,-42,60,-53,-54,60,60,60,-52,]),'EQ':([29,33,34,35,36,37,39,40,41,42,43,45,50,65,66,67,68,71,73,74,75,76,82,83,84,85,86,87,88,91,92,93,94,95,104,106,110,111,115,118,119,120,122,123,126,129,131,133,],[61,-22,-23,-24,-25,-26,-29,-30,-31,-32,-33,-35,-37,61,61,-21,-27,-34,61,61,61,61,61,61,61,61,None,None,None,-20,61,-40,61,-28,-36,-41,61,61,61,61,-42,61,-53,-54,61,61,61,-52,]),'AT':([29,33,34,35,36,37,39,40,41,42,43,45,50,65,66,67,68,71,73,74,75,76,82,83,84,85,86,87,88,91,92,93,94,95,104,106,110,111,115,118,119,120,122,123,126,129,131,133,],[63,-22,-23,-24,-25,-26,-29,-30,-31,-32,-33,-35,-37,63,63,63,63,-34,63,63,63,63,63,63,63,63,63,63,63,-20,63,-40,63,-28,-36,-41,63,63,63,63,-42,63,-53,-54,63,63,63,-52,]),'DOT':([29,33,34,35,36,37,39,40,41,42,43,45,50,62,64,65,66,67,68,71,73,74,75,76,82,83,84,85,86,87,88,90,91,92,93,94,95,104,106,110,111,115,118,119,120,122,123,126,129,131,133,],[-45,-22,-23,-24,-25,-26,-29,-30,-31,-32,-33,-35,-37,89,-39,-15,-45,-21,-27,-34,-45,-45,-45,-45,-16,-17,-18,-19,-45,-45,-45,-38,-20,-45,-40,-45,-28,-36,-41,-45,-45,-45,-45,-42,-45,-53,-54,-45,-45,-45,-52,]),'THEN':([33,34,35,36,37,39,40,41,42,43,45,50,65,67,68,71,74,82,83,84,85,86,87,88,91,92,93,95,104,106,115,119,122,123,133,],[-22,-23,-24,-25,-26,-29,-30,-31,-32,-33,-35,-37,-15,-21,-27,-34,97,-16,-17,-18,-19,-58,-59,-60,-20,-61,-40,-28,-36,-41,-46,-42,-53,-54,-52,]),'LOOP':([33,34,35,36,37,39,40,41,42,43,45,50,65,67,68,71,75,82,83,84,85,86,87,88,91,92,93,95,104,106,115,119,122,123,133,],[-22,-23,-24,-25,-26,-29,-30,-31,-32,-33,-35,-37,-15,-21,-27,-34,98,-16,-17,-18,-19,-58,-59,-60,-20,-61,-40,-28,-36,-41,-46,-42,-53,-54,-52,]),'OF':([33,34,35,36,37,39,40,41,42,43,45,50,65,67,68,71,76,82,83,84,85,86,87,88,91,92,93,95,104,106,115,119,122,123,133,],[-22,-23,-24,-25,-26,-29,-30,-31,-32,-33,-35,-37,-15,-21,-27,-34,99,-16,-17,-18,-19,-58,-59,-60,-20,-61,-40,-28,-36,-41,-46,-42,-53,-54,-52,]),'ELSE':([33,34,35,36,37,39,40,41,42,43,45,50,65,67,68,71,82,83,84,85,86,87,88,91,92,93,95,104,106,110,115,119,122,123,133,],[-22,-23,-24,-25,-26,-29,-30,-31,-32,-33,-35,-37,-15,-21,-27,-34,-16,-17,-18,-19,-58,-59,-60,-20,-61,-40,-28,-36,-41,121,-46,-42,-53,-54,-52,]),'POOL':([33,34,35,36,37,39,40,41,42,43,45,50,65,67,68,71,82,83,84,85,86,87,88,91,92,93,95,104,106,111,115,119,122,123,133,],[-22,-23,-24,-25,-26,-29,-30,-31,-32,-33,-35,-37,-15,-21,-27,-34,-16,-17,-18,-19,-58,-59,-60,-20,-61,-40,-28,-36,-41,122,-46,-42,-53,-54,-52,]),'FI':([33,34,35,36,37,39,40,41,42,43,45,50,65,67,68,71,82,83,84,85,86,87,88,91,92,93,95,104,106,115,119,122,123,129,133,],[-22,-23,-24,-25,-26,-29,-30,-31,-32,-33,-35,-37,-15,-21,-27,-34,-16,-17,-18,-19,-58,-59,-60,-20,-61,-40,-28,-36,-41,-46,-42,-53,-54,133,-52,]),'ESAC':([112,124,130,],[123,-56,-55,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,4,],[1,6,]),'class':([0,4,],[2,2,]),'_inherits':([5,],[7,]),'empty':([5,10,19,29,65,66,67,68,73,74,75,76,82,83,84,85,86,87,88,92,94,110,111,115,118,120,126,129,131,],[9,14,14,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'ffeature':([10,19,],[12,23,]),'feature':([10,19,],[13,13,]),'temp':([10,19,51,101,],[16,16,78,78,]),'idDots':([10,19,20,51,54,99,101,124,],[17,17,27,17,27,114,17,114,]),'formal':([20,54,],[25,81,]),'expr':([22,30,31,32,38,46,47,48,49,55,56,57,58,59,60,61,69,70,96,97,98,100,103,108,117,121,125,],[29,65,66,67,68,73,74,75,76,82,83,84,85,86,87,88,92,94,73,110,111,115,118,120,126,129,131,]),'block':([22,30,31,32,38,46,47,48,49,55,56,57,58,59,60,61,69,70,96,97,98,100,103,108,117,121,125,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'conditional':([22,30,31,32,38,46,47,48,49,55,56,57,58,59,60,61,69,70,96,97,98,100,103,108,117,121,125,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'loop':([22,30,31,32,38,46,47,48,49,55,56,57,58,59,60,61,69,70,96,97,98,100,103,108,117,121,125,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'case':([22,30,31,32,38,46,47,48,49,55,56,57,58,59,60,61,69,70,96,97,98,100,103,108,117,121,125,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'dispatch':([22,30,31,32,38,46,47,48,49,55,56,57,58,59,60,61,69,70,96,97,98,100,103,108,117,121,125,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'let':([22,30,31,32,38,46,47,48,49,55,56,57,58,59,60,61,69,70,96,97,98,100,103,108,117,121,125,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'dispatch_call':([22,30,31,32,38,46,47,48,49,55,56,57,58,59,60,61,69,70,89,96,97,98,100,103,108,117,121,125,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,104,50,50,50,50,50,50,50,50,50,]),'especific':([29,65,66,67,68,73,74,75,76,82,83,84,85,86,87,88,92,94,110,111,115,118,120,126,129,131,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'expression_list':([46,96,],[72,109,]),'declaration_list':([51,101,],[77,116,]),'params_expression':([94,120,],[107,128,]),'add':([99,124,],[112,130,]),'derivate':([99,124,],[113,113,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class SEMICOLON program','program',3,'p_program','parser_rules.py',23),
  ('program -> class SEMICOLON','program',2,'p_program','parser_rules.py',24),
  ('class -> CLASS TYPE _inherits LBRACE ffeature RBRACE','class',6,'p_class','parser_rules.py',28),
  ('_inherits -> INHERITS TYPE','_inherits',2,'p_inherits','parser_rules.py',32),
  ('_inherits -> empty','_inherits',1,'p_inherits','parser_rules.py',33),
  ('ffeature -> feature SEMICOLON ffeature','ffeature',3,'p_ffeature','parser_rules.py',37),
  ('ffeature -> empty','ffeature',1,'p_ffeature','parser_rules.py',38),
  ('feature -> ID LPAREN formal RPAREN TDOTS TYPE LBRACE expr RBRACE','feature',9,'p_feature','parser_rules.py',42),
  ('feature -> ID LPAREN RPAREN TDOTS TYPE LBRACE expr RBRACE','feature',8,'p_feature','parser_rules.py',43),
  ('feature -> temp','feature',1,'p_feature','parser_rules.py',44),
  ('formal -> idDots COMMA formal','formal',3,'p_formal','parser_rules.py',52),
  ('formal -> idDots','formal',1,'p_formal','parser_rules.py',53),
  ('expression_list -> expr SEMICOLON expression_list','expression_list',3,'p_expression_list','parser_rules.py',58),
  ('expression_list -> expr SEMICOLON','expression_list',2,'p_expression_list','parser_rules.py',59),
  ('expr -> NOT expr','expr',2,'p_expression_not','parser_rules.py',63),
  ('expr -> expr PLUS expr','expr',3,'p_expression_binop','parser_rules.py',67),
  ('expr -> expr MINUS expr','expr',3,'p_expression_binop','parser_rules.py',68),
  ('expr -> expr MULTIPLY expr','expr',3,'p_expression_binop','parser_rules.py',69),
  ('expr -> expr DIVIDE expr','expr',3,'p_expression_binop','parser_rules.py',70),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expression_g','parser_rules.py',76),
  ('expr -> ISVOID expr','expr',2,'p_expression_g','parser_rules.py',77),
  ('expr -> block','expr',1,'p_expression_g','parser_rules.py',78),
  ('expr -> conditional','expr',1,'p_expression_g','parser_rules.py',79),
  ('expr -> loop','expr',1,'p_expression_g','parser_rules.py',80),
  ('expr -> case','expr',1,'p_expression_g','parser_rules.py',81),
  ('expr -> dispatch','expr',1,'p_expression_g','parser_rules.py',82),
  ('expr -> INT_COMP expr','expr',2,'p_expression_g','parser_rules.py',83),
  ('block -> LBRACE expression_list RBRACE','block',3,'p_block','parser_rules.py',88),
  ('expr -> ID','expr',1,'p_expression_id','parser_rules.py',92),
  ('expr -> INTEGER','expr',1,'p_expression_int','parser_rules.py',96),
  ('expr -> STRING','expr',1,'p_expression_str','parser_rules.py',100),
  ('expr -> TRUE','expr',1,'p_expression_bool','parser_rules.py',104),
  ('expr -> FALSE','expr',1,'p_expression_bool','parser_rules.py',105),
  ('expr -> NEW TYPE','expr',2,'p_expression_newtype','parser_rules.py',109),
  ('expr -> let','expr',1,'p_expression_l','parser_rules.py',113),
  ('dispatch -> expr especific DOT dispatch_call','dispatch',4,'p_dispatch','parser_rules.py',117),
  ('dispatch -> dispatch_call','dispatch',1,'p_dispatch','parser_rules.py',118),
  ('especific -> AT TYPE','especific',2,'p_especific','parser_rules.py',122),
  ('especific -> empty','especific',1,'p_especific','parser_rules.py',123),
  ('dispatch_call -> ID LPAREN RPAREN','dispatch_call',3,'p_dispatch_call','parser_rules.py',127),
  ('dispatch_call -> ID LPAREN expr RPAREN','dispatch_call',4,'p_dispatch_call','parser_rules.py',128),
  ('dispatch_call -> ID LPAREN expr params_expression RPAREN','dispatch_call',5,'p_dispatch_call','parser_rules.py',129),
  ('params_expression -> COMMA expr params_expression','params_expression',3,'p_more_expression','parser_rules.py',133),
  ('params_expression -> COMMA expr','params_expression',2,'p_more_expression','parser_rules.py',134),
  ('empty -> <empty>','empty',0,'p_empty','parser_rules.py',139),
  ('let -> LET declaration_list IN expr','let',4,'p_let_expression','parser_rules.py',143),
  ('declaration_list -> temp COMMA declaration_list','declaration_list',3,'p_declaration_list','parser_rules.py',147),
  ('declaration_list -> temp','declaration_list',1,'p_declaration_list','parser_rules.py',148),
  ('temp -> idDots','temp',1,'p_temp','parser_rules.py',151),
  ('temp -> idDots ASSIGN expr','temp',3,'p_temp','parser_rules.py',152),
  ('idDots -> ID TDOTS TYPE','idDots',3,'p_idDots','parser_rules.py',156),
  ('conditional -> IF expr THEN expr ELSE expr FI','conditional',7,'p_conditional','parser_rules.py',160),
  ('loop -> WHILE expr LOOP expr POOL','loop',5,'p_loop','parser_rules.py',164),
  ('case -> CASE expr OF add ESAC','case',5,'p_case','parser_rules.py',168),
  ('add -> derivate SEMICOLON add','add',3,'p_add','parser_rules.py',172),
  ('add -> derivate SEMICOLON','add',2,'p_add','parser_rules.py',173),
  ('derivate -> idDots ARROW expr','derivate',3,'p_derivate','parser_rules.py',177),
  ('expr -> expr LT expr','expr',3,'p_expression_cmp','parser_rules.py',181),
  ('expr -> expr LTEQ expr','expr',3,'p_expression_cmp','parser_rules.py',182),
  ('expr -> expr EQ expr','expr',3,'p_expression_cmp','parser_rules.py',183),
  ('expr -> ID ASSIGN expr','expr',3,'p_expression_assign','parser_rules.py',187),
]
